// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Role {
  id   Int    @id @default(autoincrement())
  name String
  user User[]

  @@map("roles") // if you want to use snake_case format
}

model User {
  id              Int           @id @default(autoincrement())
  first_name      String
  last_name       String
  email           String        @unique
  phone_number    String
  password        String
  referral_code   String
  f_referral_code String?
  poin            Int
  exp_poin        DateTime?
  event           Event[]
  review          Review[]
  voucher         Voucher[]
  user_voucher    UserVoucher[]
  transaction     Transaction[]

  Role   Role? @relation(fields: [roleId], references: [id])
  roleId Int?

  @@map("users")
}

enum Category {
  music
  theatre
  festival
  hobbies
}

model Event {
  id         Int      @id @default(autoincrement())
  event_name String
  event_desc String?
  location   String
  start_date DateTime
  end_date   DateTime
  start_time DateTime
  end_time   DateTime
  category   Category
  ticket     Ticket[]
  review     Review[]

  User   User? @relation(fields: [userId], references: [id])
  userId Int?

  @@map("events")
}

model Ticket {
  id                 Int                 @id @default(autoincrement())
  ticket_type        String
  price              Int
  stock              Int
  discount_price     Int
  disc_start_date    DateTime
  disc_end_date      DateTime
  transaction_detail TransactionDetail[]

  Event   Event? @relation(fields: [eventId], references: [id])
  eventId Int?

  @@map("tickets")
}

model Review {
  id     Int    @id @default(autoincrement())
  review String
  rating Int

  User    User?  @relation(fields: [userId], references: [id])
  userId  Int?
  Event   Event? @relation(fields: [eventId], references: [id])
  eventId Int?

  @@map("reviews")
}

enum Vouchertype {
  percentage
  unit
}

model Voucher {
  id           Int           @id @default(autoincrement())
  voucher_name String
  voucher_desc String
  amount       Int
  voucher_type Vouchertype
  start_date   DateTime?
  end_date     DateTime?
  user_voucher UserVoucher[]
  transaction  Transaction[]

  User   User? @relation(fields: [userId], references: [id])
  userId Int?

  @@map("vouchers")
}

model UserVoucher {
  id         Int      @id @default(autoincrement())
  is_used    Boolean
  valid_date DateTime

  Voucher   Voucher? @relation(fields: [voucherId], references: [id])
  voucherId Int?
  User      User?    @relation(fields: [userId], references: [id])
  userId    Int?

  @@map("user_vouchers")
}

model Transaction {
  id                 Int                 @id @default(autoincrement())
  invoice            String
  transaction_date   DateTime
  total_price        Int
  transaction_detail TransactionDetail[]

  Voucher   Voucher? @relation(fields: [voucherId], references: [id])
  voucherId Int?
  User      User?    @relation(fields: [userId], references: [id])
  userId    Int?
}

model TransactionDetail {
  id       Int @id @default(autoincrement())
  quantity Int
  price    Int
  discount Int

  Transaction   Transaction? @relation(fields: [transactionId], references: [id])
  transactionId Int?
  Ticket        Ticket?      @relation(fields: [ticketId], references: [id])
  ticketId      Int?
}
